#undef CONFIG_ZMK_MACRO_DEFAULT_WAIT_MS
#define CONFIG_ZMK_MACRO_DEFAULT_WAIT_MS 30

#undef CONFIG_ZMK_MACRO_DEFAULT_TAP_MS
#define CONFIG_ZMK_MACRO_DEFAULT_TAP_MS 40

/* Canadian Multilingual Standard Mappings */

#define SLSH   GRAVE         // /
#define SAPOS  LS(COMMA)     // '
#define DAPOS  LS(DOT)       // "
#define DEG    RA(SEMI)      // °
#define LBRAC  RA(N7)        // {
#define RBRAC  RA(N8)        // }
#define LBKET  RA(N9)        // [
#define RBKET  RA(N0)        // ]
#define QUEST  LS(N6)        // ?
#define PIP    RA(GRAVE)     // |
#define TILDS  RA(RBKT)      // ~
#define LETHAN RA(COMMA)     // ≤
#define GRTHAN RA(DOT)       // ≥
#define ACC_CI LBKT          // ^
#define ACC_GR RA(LBKT)      // `
#define ACC_TR LS(LBKT)      // ¨

// Mod-morph - lowercase / uppercase accented characters
ZMK_MOD_MORPH(morph_a_circ, bindings = <&CIRC A>, <&CIRC LS(A)>; mods = <(MOD_LSFT|MOD_RSFT)>;) // â / Â
ZMK_MOD_MORPH(morph_e_circ, bindings = <&CIRC E>, <&CIRC LS(E)>; mods = <(MOD_LSFT|MOD_RSFT)>;) // ê / Ê
ZMK_MOD_MORPH(morph_e_trem, bindings = <&TREM E>, <&TREM LS(E)>; mods = <(MOD_LSFT|MOD_RSFT)>;) // ê / Ê
ZMK_MOD_MORPH(morph_i_circ, bindings = <&CIRC I>, <&CIRC LS(I)>; mods = <(MOD_LSFT|MOD_RSFT)>;) // î / Î
ZMK_MOD_MORPH(morph_i_trem, bindings = <&TREM I>, <&TREM LS(I)>; mods = <(MOD_LSFT|MOD_RSFT)>;) // ê / Ê
ZMK_MOD_MORPH(morph_o_circ, bindings = <&CIRC O>, <&CIRC LS(O)>; mods = <(MOD_LSFT|MOD_RSFT)>;) // ô / Ô
ZMK_MOD_MORPH(morph_o_trem, bindings = <&TREM O>, <&TREM LS(O)>; mods = <(MOD_LSFT|MOD_RSFT)>;) // ê / Ê
ZMK_MOD_MORPH(morph_u_circ, bindings = <&CIRC I>, <&CIRC LS(U)>; mods = <(MOD_LSFT|MOD_RSFT)>;) // û / Û
ZMK_MOD_MORPH(morph_u_grav, bindings = <&AGRA U>, <&AGRA LS(U)>; mods = <(MOD_LSFT|MOD_RSFT)>;) // ù / Ù
ZMK_MOD_MORPH(morph_u_trem, bindings = <&TREM U>, <&TREM LS(U)>; mods = <(MOD_LSFT|MOD_RSFT)>;) // ê / Ê
ZMK_MOD_MORPH(morph__ae, bindings = <&kp RC(A)>, <&kp LS(RC(A))>; mods = <(MOD_LSFT|MOD_RSFT)>;) // æ / Æ
ZMK_MOD_MORPH(morph__oe, bindings = <&kp RC(E)>, <&kp LS(RC(E))>; mods = <(MOD_LSFT|MOD_RSFT)>;) // œ / Œ

// The following macros return to the base layer after being pressed
ZMK_MACRO_ONE_PARAM(A_GR, bindings = <&kp BACKSLASH>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)   // À
ZMK_MACRO_ONE_PARAM(A_CI, bindings = <&morph_a_circ>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)   // Â
ZMK_MACRO_ONE_PARAM(E_CU, bindings = <&kp SLASH>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // É
ZMK_MACRO_ONE_PARAM(E_GR, bindings = <&kp APOS>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)        // È
ZMK_MACRO_ONE_PARAM(E_CI, bindings = <&morph_e_circ>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)   // Ê
ZMK_MACRO_ONE_PARAM(E_TR, bindings = <&morph_e_trem>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)   // Ê
ZMK_MACRO_ONE_PARAM(I_CI, bindings = <&morph_i_circ>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)   // Î
ZMK_MACRO_ONE_PARAM(I_TR, bindings = <&morph_i_trem>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)   // Ê
ZMK_MACRO_ONE_PARAM(O_CI, bindings = <&morph_o_circ>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)   // Ô
ZMK_MACRO_ONE_PARAM(O_TR, bindings = <&morph_o_trem>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)   // Ê
ZMK_MACRO_ONE_PARAM(U_CI, bindings = <&morph_u_circ>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)   // Û
ZMK_MACRO_ONE_PARAM(U_GR, bindings = <&morph_u_grav>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)   // Ù
ZMK_MACRO_ONE_PARAM(U_TR, bindings = <&morph_u_trem>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)   // Ê
ZMK_MACRO_ONE_PARAM(AE_L, bindings = <&morph__ae>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)      // Æ
ZMK_MACRO_ONE_PARAM(OE_L, bindings = <&morph__oe>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)      // Œ
ZMK_MACRO_ONE_PARAM(CEDIL, bindings = <&kp RBKT>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // Ç


// QWERTY Homerow Mods
ZMK_MACRO(E_GR_D, bindings = <&kp APOS>, <&to QWE>;) // È
ZMK_MACRO(I_CI_D, bindings = <&morph_i_circ>, <&to QWE>;) // Î

// Colemak Homerow Mods
ZMK_MACRO(E_GR_C, bindings = <&kp APOS>, <&to COL>;) // È
ZMK_MACRO(I_CI_C, bindings = <&morph_i_circ>, <&to COL>;) // Î

// Ergo-L Homerow Mods
ZMK_MACRO(E_CI_E, bindings = <&morph_e_circ>, <&to ERG>;) // Ê

// ` directly
ZMK_MACRO(GRA, bindings =
    <&macro_press &kp RALT>,
    <&macro_tap &kp LBKT &kp LBKT>,
    <&macro_release &kp RALT>;
)

// ^ directly
ZMK_MACRO(CAR, bindings =
    <&macro_tap &kp LBKT &kp SPACE>;
)

// ¨ directly
ZMK_MACRO_ONE_PARAM(TREMA, bindings =
    <&macro_tap &kp LS(LBKT) &kp SPACE>,
    <&macro_param_1to1>,
    <&to MACRO_PLACEHOLDER>;
)

// ` to input
ZMK_MACRO_ONE_PARAM(AGRA, bindings =
    <&kp RA(LBKT)>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>;
)

// ` to input then to default layer
ZMK_MACRO_ONE_PARAM(AGRA_D, bindings =
    <&kp RA(LBKT)>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>,
    <&to QWE>;
)

// ´ to input
ZMK_MACRO_TWO_PARAM(AIGU, bindings =
    <&kp RA(SLASH)>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>,
    <&macro_param_2to1>,
    <&to MACRO_PLACEHOLDER>;
)

// ¨ to input
ZMK_MACRO_ONE_PARAM(TREM, bindings =
    <&kp LS(LBKT)>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>;
)

// ^ to input
ZMK_MACRO_ONE_PARAM(CIRC, bindings =
    <&kp LBKT>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>;
)

// ^ to input then to default layer
ZMK_MACRO_ONE_PARAM(CIRC_D, bindings =
    <&kp LBKT>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>,
    <&to QWE>;
)

// Keypress then return to default layer
ZMK_MACRO_TWO_PARAM(KPD, bindings =
    <&macro_param_1to1>,
    <&kp MACRO_PLACEHOLDER>,
    <&macro_param_2to1>,
    <&to MACRO_PLACEHOLDER>;
)

/* Fractions */
ZMK_MACRO(MATH_1_4, bindings = <&kp RC(0)>;)     // ¼
ZMK_MACRO(MATH_1_2, bindings = <&kp RC(PLUS)>;)  // ½
ZMK_MACRO(MATH_3_4, bindings = <&kp RC(MINUS)>;) // ¾

/* Symbols */
ZMK_MACRO(MATH_pm,    bindings = <&kp RA(1)>;)    // ±
ZMK_MACRO(MATH_deg,   bindings = <&kp RA(SEMI)>;) // °
ZMK_MACRO(MATH_micro, bindings = <&kp RA(M)>;)    // µ
